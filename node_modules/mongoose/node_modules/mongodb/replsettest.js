'use strict';

var mongo = require('./');
var MongoClient = mongo.MongoClient;
var ReplicaSet = mongo.ReplSet;
var Server = mongo.Server;
var Db = mongo.Db;

function getRandom(min, max) {
  return min + Math.floor(Math.random() * (max - min + 1));
}

var delay = getRandom(1, 10) * 100;
var total = getRandom(10, 100);
var haInterval = getRandom(1, 3) * 10000;

console.log('delay:', delay);
console.log('total:', total);
console.log('haInterval:', haInterval);

var servers = [];
var server = new Server('localhost', 27017);
servers.push(server);

var replicaSet = new ReplicaSet(servers, {haInterval: haInterval});
//var replicaSet = new ReplicaSet(servers, {ha: false});
var database = new Db('replica_set_test', replicaSet, {w: 1});

var collectionName = 'test';

database.open(function(err, db) {
  console.log("------------------------ CONNECT")
  console.dir(err)
  if (err) {
    console.log(err.stack);
  } else {
    console.log('Open db - success!');
    var collection = db.collection(collectionName);
    var startTime = new Date().getTime();
    var count = 0;
    var interval = setInterval(function() {
      ++count;
      console.log('\n#', count, '; time =', new Date().getTime() - startTime);
      someOperations(db, collection, function() {
        if (count >= total) {
          clearInterval(interval);
          done(db);
        }
      });
    }, delay)
  }
});

function someOperations(db, collection, callback) {
  collection.insert({a:1, b:2}, function(err, result) {
    //console.log('******** insert result', err, result);
    collection.findOne({}, function(err, result) {
      //console.log('******** findOne result', err, result);
      db.dropDatabase(function (err) {
        //console.log('******** dropDatabase', err);
        callback();
      });
    });
  });
}

function done(db) {
  db.close(function() {
    console.log('db is closed!');
    process.exit();
  });
}
